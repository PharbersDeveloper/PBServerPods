// Code generated by github.com/actgardner/gogen-avro. DO NOT EDIT.
/*
 * SOURCE:
 *     AssetDataMart.avsc
 */

package PhAssetDataMart

import (
	"github.com/actgardner/gogen-avro/compiler"
	"github.com/actgardner/gogen-avro/container"
	"github.com/actgardner/gogen-avro/vm"
	"github.com/actgardner/gogen-avro/vm/types"
	"io"
)

type AssetDataMart struct {
	AssetName        string
	AssetDescription string
	AssetVersion     string
	AssetDataType    string
	Providers        []string
	Markets          []string
	Molecules        []string
	DataCover        []string
	GeoCover         []string
	Labels           []string
	Dfs              []string
	MartName         string
	MartUrl          string
	MartDataType     string
}

func NewAssetDataMartWriter(writer io.Writer, codec container.Codec, recordsPerBlock int64) (*container.Writer, error) {
	str := &AssetDataMart{}
	return container.NewWriter(writer, codec, recordsPerBlock, str.Schema())
}

func DeserializeAssetDataMart(r io.Reader) (*AssetDataMart, error) {
	t := NewAssetDataMart()
	err := deserializeField(r, t.Schema(), t.Schema(), t)
	return t, err
}

func DeserializeAssetDataMartFromSchema(r io.Reader, schema string) (*AssetDataMart, error) {
	t := NewAssetDataMart()
	err := deserializeField(r, schema, t.Schema(), t)
	return t, err
}

func NewAssetDataMart() *AssetDataMart {
	return &AssetDataMart{}
}

func (r *AssetDataMart) Schema() string {
	return "{\"fields\":[{\"name\":\"assetName\",\"type\":\"string\"},{\"name\":\"assetDescription\",\"type\":\"string\"},{\"name\":\"assetVersion\",\"type\":\"string\"},{\"name\":\"assetDataType\",\"type\":\"string\"},{\"name\":\"providers\",\"type\":{\"items\":\"string\",\"type\":\"array\"}},{\"name\":\"markets\",\"type\":{\"items\":\"string\",\"type\":\"array\"}},{\"name\":\"molecules\",\"type\":{\"items\":\"string\",\"type\":\"array\"}},{\"name\":\"dataCover\",\"type\":{\"items\":\"string\",\"type\":\"array\"}},{\"name\":\"geoCover\",\"type\":{\"items\":\"string\",\"type\":\"array\"}},{\"name\":\"labels\",\"type\":{\"items\":\"string\",\"type\":\"array\"}},{\"name\":\"dfs\",\"type\":{\"items\":\"string\",\"type\":\"array\"}},{\"name\":\"martName\",\"type\":\"string\"},{\"name\":\"martUrl\",\"type\":\"string\"},{\"name\":\"martDataType\",\"type\":\"string\"}],\"name\":\"AssetDataMart\",\"namespace\":\"com.pharbers.kafka.schema\",\"type\":\"record\"}"
}

func (r *AssetDataMart) SchemaName() string {
	return "com.pharbers.kafka.schema.AssetDataMart"
}

func (r *AssetDataMart) Serialize(w io.Writer) error {
	return writeAssetDataMart(r, w)
}

func (_ *AssetDataMart) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ *AssetDataMart) SetInt(v int32)       { panic("Unsupported operation") }
func (_ *AssetDataMart) SetLong(v int64)      { panic("Unsupported operation") }
func (_ *AssetDataMart) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ *AssetDataMart) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ *AssetDataMart) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ *AssetDataMart) SetString(v string)   { panic("Unsupported operation") }
func (_ *AssetDataMart) SetUnionElem(v int64) { panic("Unsupported operation") }
func (r *AssetDataMart) Get(i int) types.Field {
	switch i {
	case 0:
		return (*types.String)(&r.AssetName)
	case 1:
		return (*types.String)(&r.AssetDescription)
	case 2:
		return (*types.String)(&r.AssetVersion)
	case 3:
		return (*types.String)(&r.AssetDataType)
	case 4:
		r.Providers = make([]string, 0)
		return (*ArrayStringWrapper)(&r.Providers)
	case 5:
		r.Markets = make([]string, 0)
		return (*ArrayStringWrapper)(&r.Markets)
	case 6:
		r.Molecules = make([]string, 0)
		return (*ArrayStringWrapper)(&r.Molecules)
	case 7:
		r.DataCover = make([]string, 0)
		return (*ArrayStringWrapper)(&r.DataCover)
	case 8:
		r.GeoCover = make([]string, 0)
		return (*ArrayStringWrapper)(&r.GeoCover)
	case 9:
		r.Labels = make([]string, 0)
		return (*ArrayStringWrapper)(&r.Labels)
	case 10:
		r.Dfs = make([]string, 0)
		return (*ArrayStringWrapper)(&r.Dfs)
	case 11:
		return (*types.String)(&r.MartName)
	case 12:
		return (*types.String)(&r.MartUrl)
	case 13:
		return (*types.String)(&r.MartDataType)

	}
	panic("Unknown field index")
}
func (r *AssetDataMart) SetDefault(i int) {
	switch i {

	}
	panic("Unknown field index")
}
func (_ *AssetDataMart) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ *AssetDataMart) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ *AssetDataMart) Finalize()                        {}

type AssetDataMartReader struct {
	r io.Reader
	p *vm.Program
}

func NewAssetDataMartReader(r io.Reader) (*AssetDataMartReader, error) {
	containerReader, err := container.NewReader(r)
	if err != nil {
		return nil, err
	}

	t := NewAssetDataMart()
	deser, err := compiler.CompileSchemaBytes([]byte(containerReader.AvroContainerSchema()), []byte(t.Schema()))
	if err != nil {
		return nil, err
	}

	return &AssetDataMartReader{
		r: containerReader,
		p: deser,
	}, nil
}

func (r *AssetDataMartReader) Read() (*AssetDataMart, error) {
	t := NewAssetDataMart()
	err := vm.Eval(r.r, r.p, t)
	return t, err
}
