"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const helpers_1 = require("../helpers");
const encodeComponentString_1 = require("./encodeComponentString");
function serializeNode(node) {
    if (node === null || typeof node === "boolean" || typeof node === "number") {
        if (typeof node === 'number' && !Number.isFinite(node)) {
            throw new Error("There's no way to serialize infinite numbers or NaN.");
        }
        return String(node);
    }
    else if (typeof node === 'string') {
        return "`" + encodeComponentString_1.encodeStringContents(node) + "`";
    }
    else if (helpers_1.isIdentifier(node)) {
        return encodeComponentString_1.encodeSymbolValue(node.value);
    }
    else if (Array.isArray(node)) {
        return "[" + node.map(serializeNode).join(",") + "]";
    }
    else if (helpers_1.isFieldExpression(node)) {
        const serializedOperator = ":" + encodeComponentString_1.encodeSymbolValue(node.operator);
        const serializedArgs = node.args.map(serializeNode);
        if (node.args.length === 2) {
            return node.operator === 'eq'
                ? `(${serializedArgs[0]},${serializedArgs[1]})`
                : `(${serializedArgs[0]},${serializedOperator},${serializedArgs[1]})`;
        }
        return ("(" +
            serializedOperator +
            (node.args.length ? "," : "") +
            serializedArgs.join(",") +
            ")");
    }
    return assertNever(node, "Unexpected/unserializable node type.");
}
exports.default = serializeNode;
;
function assertNever(x, message) {
    throw new Error(message);
}
