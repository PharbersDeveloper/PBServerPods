"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const { expect } = require("chai");
const utils_1 = require("./utils");
const sort_param_parser_1 = require("../../src/parsing/sort-param-parser");
const noValidationFinalizeArgs = function (a, b, args) {
    return args;
};
const eqOperator = {
    "eq": { arity: 2, finalizeArgs: noValidationFinalizeArgs }
};
const andOrOperators = {
    "and": { arity: Infinity, finalizeArgs: noValidationFinalizeArgs },
    "or": { arity: Infinity, finalizeArgs: noValidationFinalizeArgs }
};
const gteExtendedOperator = {
    "gte": {
        arity: Infinity,
        finalizeArgs(a, b, args) {
            return ["custom args"];
        }
    }
};
describe("Sort param parsing", () => {
    it("should error if a field expression is invalid", () => {
        expect(() => sort_param_parser_1.default(eqOperator, "test,(:now)")).to.throw(/"now" .+ recognized operator/);
        expect(() => sort_param_parser_1.default(eqOperator, "(:now)")).to.throw(/"now" .+ recognized operator/);
    });
    it("should (recursively) process the field expressions, calling finalizeArgs", () => {
        const sutWithOps = sort_param_parser_1.default.bind(null, Object.assign({}, eqOperator, gteExtendedOperator, andOrOperators));
        expect(sutWithOps("-hello,(:and,(:or,(:and,(it,3)),(:gte,1000,fieldName,230)),(field,:eq,2))"))
            .to.deep.equal([{
                direction: "DESC",
                field: "hello"
            }, {
                direction: "ASC",
                expression: utils_1.FieldExpression("and", [
                    utils_1.FieldExpression("or", [
                        utils_1.FieldExpression("and", [
                            utils_1.FieldExpression("eq", [utils_1.Identifier("it"), 3])
                        ]),
                        utils_1.FieldExpression("gte", ["custom args"])
                    ]),
                    utils_1.FieldExpression("eq", [{ type: "Identifier", value: "field" }, 2])
                ])
            }]);
    });
});
